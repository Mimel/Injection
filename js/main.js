// Generated by CoffeeScript 2.4.1
(function() {
  (function($) {
    var InjectionRunner, Node, commandDictionary;
    commandDictionary = {
      // Goes to the following node, carrying a value.
      // Expects 2 parameters, a node, and a value.
      inject: function(values) {
        var node, value;
        node = values[0];
        value = values[1];
        return console.log('inj');
      },
      // Returns to the node's parrent, carrying the value of the field indicated and setting it into store.
      // Expects 1 parameter, a field.
      return: function(values) {
        var field;
        field = values[0];
        return console.log('ret');
      },
      // Sets a field in the node to the value indicated.
      // Expects 2 parameters, a field and a value.
      set: function(values) {
        var field, value;
        field = values[0];
        value = values[1];
        return console.log('set');
      },
      // Stores a field into memory.
      // Expects 1 parameters, a field.
      store: function(values) {
        var field;
        field = values[0];
        return console.log('ste');
      }
    };
    Node = class Node {
      constructor(name, fields, linksTo) {
        this.name = name;
        this.fields = fields;
        this.linksTo = linksTo;
      }

      displayName() {
        return console.log(this.name);
      }

    };
    InjectionRunner = (function() {
      var runLine, store;

      class InjectionRunner {
        constructor(code) {
          this.code = code;
        }

        run(tree) {
          var i, len, line, results, splitLines;
          splitLines = this.code.split('\n');
          results = [];
          for (i = 0, len = splitLines.length; i < len; i++) {
            line = splitLines[i];
            results.push(runLine(line));
          }
          return results;
        }

      };

      store = 0;

      runLine = function(line) {
        var lexemes;
        lexemes = line.split(' ');
        return commandDictionary[lexemes[0]](function() {
          return lexemes.slice(1);
        });
      };

      return InjectionRunner;

    }).call(this);
    return $('#injection_run').click(function(event) {
      var runner;
      event.preventDefault();
      runner = new InjectionRunner($('#injection_code').val());
      return runner.run('test');
    });
  })(jQuery);

}).call(this);
